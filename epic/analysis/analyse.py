# Copyright (c) 2021 Alphons Gwatimba
#
# This software is released under the MIT License.
# https://opensource.org/licenses/MIT
import os
from functools import partial
from pathlib import Path
from typing import Any

import pypeln as pl
from alive_progress import alive_it

from epic.logging.logging import LOGGER

import nbconvert
from nbconvert.preprocessors import CellExecutionError, ExecutePreprocessor

import nbformat

ANALYSIS_DIR_NAME = 'Analysis'
NOTEBOOK_DIR = 'misc/notebooks'
FINAL_REPORT_FILE_EXT = '.html'


def analyse(dirs: list[Path], config: dict[str, Any]) -> None:
    """Generates analysis reports for images.

    Generates analysis reports for images located in the given input
    directories. Reports will be placed in a subdirectory called 'Analysis'
    that will be created in each input directory and will be in the form of
    HTML documents generated from a Jupyter Notebook file specified in the EPIC
    YAML configuration file. The Jupyter Notebook contains the analysis
    procedure that will be executed for the images while utilising
    corresponding data generated by EPIC from those images. Other files such as
    videos, images and excel spreadsheet documents may also be generated in the
    analysis directory as a result of this.

    Args:
        dirs: A sequence of existing input directories containing images
            in common image formats (.png, .tiff, etc).
        config: A loaded EPIC YAML configuration file.
    """
    # find report file
    if not ((report_path := Path(config['analysis']['report'])).is_file() or (
            report_path := Path(__file__).resolve().parents[
            2] / NOTEBOOK_DIR / report_path).is_file()):
        LOGGER.error('Specified report file does not exist.')
        return

    # prevent errors when logger is imported in notebooks in processes
    os.environ['EPIC_LOGGING_NO_MP'] = 'TRUE'

    # start proccessing
    p = partial(process, report_path, config['analysis']['always_analyse'])
    stage = (pl.process.map(p, dirs, workers=config['misc']['num_workers'])
             if config['misc']['num_workers'] != 1 else (p(
                 curr_dir) for curr_dir in dirs))
    list(alive_it(stage, total=len(dirs),
                  disable=not config['misc']['progress_bar']))


def process(input_report_path: Path, always_analyse: bool,
            input_dir: Path) -> None:
    """Generates an analysis report for an image sequence.

    Generates an analysis reports for image sequences located in the given
    directory. Report is in the form of a HTML document and generated from a
    Jupyter Notebook specified in the config file. Other files such as videos
    and images may also be generated in the directory.

    Args:
        input_report_path: The jupyter notebook file to use for generating
            report.
        always_analyse: If True will perform data analysis for all image
            sequences, even those with existing analysis report files.
        input_dir: An existing directory containing an image sequence
            in common image formats (.png, .tiff, etc).
    """
    LOGGER.info(f'Processing \'{input_dir}\'.')
    prefix = f'(Image sequence: {input_dir.name})'

    output_report_path = input_dir / ANALYSIS_DIR_NAME / input_report_path.name

    # perform analysis
    if always_analyse or not output_report_path.is_file():
        # create output directory if necessary
        if not (output_dir := output_report_path.parent).is_dir():
            output_dir.mkdir(exist_ok=True)

        with open(input_report_path, encoding='utf-8') as f:
            nb = nbformat.read(f, as_version=4)
            ep = ExecutePreprocessor(timeout=60000, kernel_name='python3')
            try:
                ep.preprocess(nb, {'metadata': {'path': output_dir}})
            except CellExecutionError:
                msg = (f"{prefix} Could not generate report, see "
                       f"\'{output_report_path.with_suffix('.html').name}\' "
                       "for error.")
                LOGGER.error(msg)
            finally:
                with open(output_report_path, 'w', encoding='utf-8') as f:
                    nbformat.write(nb, f)
                    save_html(output_report_path)

    LOGGER.info(f'{prefix} Finished analysing.')


def save_html(report_path: Path) -> None:
    """Converts a Jupyter Notebook file to a HTML file.

    The HTML file is saved in the same directory as the Jupyter Notebook file.

    Args:
        report_path: The path to a Jupyter Notebook file.
    """
    with open(report_path, encoding='utf-8') as f:
        nb = nbformat.read(f, as_version=4)
        exporter = nbconvert.HTMLExporter()
        exporter.exclude_input = True
        body, resources = exporter.from_notebook_node(nb)
        file_writer = nbconvert.writers.FilesWriter()
        file_writer.write(output=body, resources=resources, notebook_name=str(
            report_path.parent / report_path.stem))
